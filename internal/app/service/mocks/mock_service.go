// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "parcel-service/internal/app/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParcelService is a mock of ParcelService interface
type MockParcelService struct {
	ctrl     *gomock.Controller
	recorder *MockParcelServiceMockRecorder
}

// MockParcelServiceMockRecorder is the mock recorder for MockParcelService
type MockParcelServiceMockRecorder struct {
	mock *MockParcelService
}

// NewMockParcelService creates a new mock instance
func NewMockParcelService(ctrl *gomock.Controller) *MockParcelService {
	mock := &MockParcelService{ctrl: ctrl}
	mock.recorder = &MockParcelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParcelService) EXPECT() *MockParcelServiceMockRecorder {
	return m.recorder
}

// CreateParcel mocks base method
func (m *MockParcelService) CreateParcel(ctx context.Context, parcel model.Parcel) error {

	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParcel", ctx, parcel)

	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParcel indicates an expected call of CreateParcel
func (mr *MockParcelServiceMockRecorder) CreateParcel(ctx, parcel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParcel", reflect.TypeOf((*MockParcelService)(nil).CreateParcel), ctx, parcel)
}

// MockParcelRepository is a mock of ParcelRepository interface
type MockParcelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockParcelRepositoryMockRecorder
}

// MockParcelRepositoryMockRecorder is the mock recorder for MockParcelRepository
type MockParcelRepositoryMockRecorder struct {
	mock *MockParcelRepository
}

// NewMockParcelRepository creates a new mock instance
func NewMockParcelRepository(ctrl *gomock.Controller) *MockParcelRepository {
	mock := &MockParcelRepository{ctrl: ctrl}
	mock.recorder = &MockParcelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParcelRepository) EXPECT() *MockParcelRepositoryMockRecorder {
	return m.recorder
}

// InsertParcel mocks base method
func (m *MockParcelRepository) InsertParcel(ctx context.Context, parcel model.Parcel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertParcel", ctx, parcel)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertParcel indicates an expected call of InsertParcel
func (mr *MockParcelRepositoryMockRecorder) InsertParcel(ctx, parcel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertParcel", reflect.TypeOf((*MockParcelRepository)(nil).InsertParcel), ctx, parcel)
}

// MockNewCarrierRequestService is a mock of CarrierRequestService interface
type MockNewCarrierRequestService struct {
	ctrl     *gomock.Controller
	recorder *MockNewCarrierRequestServiceMockRecorder
}

// MockNewCarrierRequestServiceMockRecorder is the mock recorder for MockNewCarrierRequestService
type MockNewCarrierRequestServiceMockRecorder struct {
	mock *MockNewCarrierRequestService
}

// NewMockNewCarrierRequestService creates a new mock instance
func NewMockNewCarrierRequestService(ctrl *gomock.Controller) *MockNewCarrierRequestService {
	mock := &MockNewCarrierRequestService{ctrl: ctrl}
	mock.recorder = &MockNewCarrierRequestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNewCarrierRequestService) EXPECT() *MockNewCarrierRequestServiceMockRecorder {
	return m.recorder
}

// NewCarrierRequest mocks base method
func (m *MockNewCarrierRequestService) NewCarrierRequest(ctx context.Context, carrierRequest model.CarrierRequest) error {

	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCarrierRequest", ctx, carrierRequest)

	ret0, _ := ret[0].(error)
	return ret0
}

// NewCarrierRequest indicates an expected call of NewCarrierRequest
func (mr *MockNewCarrierRequestServiceMockRecorder) NewCarrierRequest(ctx, carrierRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCarrierRequest", reflect.TypeOf((*MockNewCarrierRequestService)(nil).NewCarrierRequest), ctx, carrierRequest)
}

// AddCarrierRequest mocks base method
func (m *MockNewCarrierRequestService) AddCarrierRequest(ctx context.Context, carrierRequest model.CarrierRequest) error {

	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCarrierRequest", ctx, carrierRequest)

	ret0, _ := ret[0].(error)
	return ret0
}

// AddCarrierRequest indicates an expected call of AddCarrierRequest
func (mr *MockNewCarrierRequestServiceMockRecorder) AddCarrierRequest(ctx, carrierRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCarrierRequest", reflect.TypeOf((*MockNewCarrierRequestService)(nil).AddCarrierRequest), ctx, carrierRequest)
}

// MockCarrierRequestRepository is a mock of CarrierRequestRepository interface
type MockCarrierRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCarrierRequestRepositoryMockRecorder
}

// MockCarrierRequestRepositoryMockRecorder is the mock recorder for MockCarrierRequestRepository
type MockCarrierRequestRepositoryMockRecorder struct {
	mock *MockCarrierRequestRepository
}

// NewMockCarrierRequestRepository creates a new mock instance
func NewMockCarrierRequestRepository(ctrl *gomock.Controller) *MockCarrierRequestRepository {
	mock := &MockCarrierRequestRepository{ctrl: ctrl}
	mock.recorder = &MockCarrierRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCarrierRequestRepository) EXPECT() *MockCarrierRequestRepositoryMockRecorder {
	return m.recorder
}

// InsertCarrierRequest mocks base method
func (m *MockCarrierRequestRepository) InsertCarrierRequest(ctx context.Context, carrierRequest model.CarrierRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCarrierRequest", ctx, carrierRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCarrierRequest indicates an expected call of InsertCarrierRequest
func (mr *MockCarrierRequestRepositoryMockRecorder) InsertCarrierRequest(ctx, carrierRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCarrierRequest", reflect.TypeOf((*MockCarrierRequestRepository)(nil).InsertCarrierRequest), ctx, carrierRequest)
}
