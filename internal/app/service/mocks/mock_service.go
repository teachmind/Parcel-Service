// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "parcel-service/internal/app/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParcelRepository is a mock of ParcelRepository interface.
type MockParcelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockParcelRepositoryMockRecorder
}

// MockParcelRepositoryMockRecorder is the mock recorder for MockParcelRepository.
type MockParcelRepositoryMockRecorder struct {
	mock *MockParcelRepository
}

// NewMockParcelRepository creates a new mock instance.
func NewMockParcelRepository(ctrl *gomock.Controller) *MockParcelRepository {
	mock := &MockParcelRepository{ctrl: ctrl}
	mock.recorder = &MockParcelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParcelRepository) EXPECT() *MockParcelRepositoryMockRecorder {
	return m.recorder
}

// GetParcelsList mocks base method.
func (m *MockParcelRepository) GetParcelsList(ctx context.Context, status, limit, offset int) ([]model.Parcel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParcelsList", ctx, status, limit, offset)
	ret0, _ := ret[0].([]model.Parcel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParcelsList indicates an expected call of GetParcelsList.
func (mr *MockParcelRepositoryMockRecorder) GetParcelsList(ctx, status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParcelsList", reflect.TypeOf((*MockParcelRepository)(nil).GetParcelsList), ctx, status, limit, offset)
}

// InsertParcel mocks base method.
func (m *MockParcelRepository) InsertParcel(ctx context.Context, parcel model.Parcel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertParcel", ctx, parcel)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertParcel indicates an expected call of InsertParcel.
func (mr *MockParcelRepositoryMockRecorder) InsertParcel(ctx, parcel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertParcel", reflect.TypeOf((*MockParcelRepository)(nil).InsertParcel), ctx, parcel)
}

// MockParcelService is a mock of ParcelService interface.
type MockParcelService struct {
	ctrl     *gomock.Controller
	recorder *MockParcelServiceMockRecorder
}

// MockParcelServiceMockRecorder is the mock recorder for MockParcelService.
type MockParcelServiceMockRecorder struct {
	mock *MockParcelService
}

// NewMockParcelService creates a new mock instance.
func NewMockParcelService(ctrl *gomock.Controller) *MockParcelService {
	mock := &MockParcelService{ctrl: ctrl}
	mock.recorder = &MockParcelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParcelService) EXPECT() *MockParcelServiceMockRecorder {
	return m.recorder
}

// CreateParcel mocks base method.
func (m *MockParcelService) CreateParcel(ctx context.Context, parcel model.Parcel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParcel", ctx, parcel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParcel indicates an expected call of CreateParcel.
func (mr *MockParcelServiceMockRecorder) CreateParcel(ctx, parcel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParcel", reflect.TypeOf((*MockParcelService)(nil).CreateParcel), ctx, parcel)
}

// GetParcels mocks base method.
func (m *MockParcelService) GetParcels(ctx context.Context, status, limit, offset int) ([]model.Parcel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParcels", ctx, status, limit, offset)
	ret0, _ := ret[0].([]model.Parcel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParcels indicates an expected call of GetParcels.
func (mr *MockParcelServiceMockRecorder) GetParcels(ctx, status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParcels", reflect.TypeOf((*MockParcelService)(nil).GetParcels), ctx, status, limit, offset)
}
